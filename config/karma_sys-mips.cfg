-- vim:set ft=lua:

require("L4");

local vm_shm = L4.default_loader:create_namespace({});

-- keywords: pass shm_starter capability to starter using --shm_name
local starter_caps = {
    shm_starter = vm_shm:m("rw");
};

print("Starting Starter task.\n");
L4.default_loader:startv(
        {
        caps = starter_caps,
        log = { "starter", "green" },
        -- run starter with higher priority than guest VMs so it finishes first
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x9),
        },
        "rom/starter",
        "--shm_name", "shm_starter",
        "--shm_size", "64"
        );

-- keywords: pass consumer capability to karma using --shm_cons flag
-- global: karma_vm1_caps used in karma_vm1-mips.cfg
print("karma_vm1_caps\n");
karma_vm1_caps = {
    consumer = vm_shm:m("rw");
    con     = L4.default_loader:new_channel();
    vbus    = L4.default_loader:new_channel();
    rtc     = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

-- keywords: pass producer capability to karma using --shm_prod flag
-- global: karma_vm2_caps used in karma_vm2-mips.cfg
print("karma_vm2_caps\n");
karma_vm2_caps = {
    producer = vm_shm:m("rw");
    vbus    = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

print("con-caps\n");
local con_caps = {
    fb 	    = L4.default_loader:new_channel();
    vbus    = L4.default_loader:new_channel();
    con     = karma_vm1_caps.con:svr();
    rom     = L4.Env.rom;
};

print("fb-caps\n");
local fb_caps = {
    vbus    = L4.default_loader:new_channel();
    fb      = con_caps.fb:svr();
    rom     = L4.Env.rom;
};

print("rtc-caps\n");
local rtc_caps = {
    vbus    = L4.default_loader:new_channel();
    rtc     = karma_vm1_caps.rtc:svr();
    rom     = L4.Env.rom;
    sigma0  = L4.Env.sigma0;
};

-- keywords:
-- capabilities assigned to vbus:svr() refer to vbus objects defined in malta-io.vbus
print("io-caps\n");
local io_caps = {
    sigma0  = L4.cast(L4.Proto.Factory, L4.Env.sigma0):create(L4.Proto.Sigma0);
    rtc     = rtc_caps.vbus:svr();
    con_bus = con_caps.vbus:svr();
    live    = karma_vm1_caps.vbus:svr();
    vm2_bus = karma_vm2_caps.vbus:svr();
    fb      = fb_caps.vbus:svr();
    rom     = L4.Env.rom;
    icu     = L4.Env.icu;
};

print("Starting IO.");
L4.default_loader:startv(
        {
        caps = io_caps,
        log = { "io", "red" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x90, 0x8),
        },
        "rom/io",
        "rom/malta.devs",
        "rom/malta-io.vbus",
        "-vv"
        );

L4.default_loader:startv(
        {
        caps = rtc_caps,
        log = { "rtc", "blue" },
        },
        "rom/rtc");

print("Starting fb-drv");
L4.default_loader:startv(
        {
        caps = fb_caps,
        log =  { "fb", "cyan" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x18, 0x8),
        },
        "rom/fb-drv", "--config=noaccel,mode:640x480-16");
-- optionally use dummy fb-drv:
--        "rom/fb-drv", "-D");

print("Starting con");
L4.default_loader:startv(
        {
        caps = con_caps,
        log = { "con", "yellow" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x18, 0x8),
        },
        "rom/con");

-- start cons server for console multiplexing
print("Starting cons server for console multiplexing.");
log_fab = L4.default_loader:new_channel();
L4.default_loader:start(
  {
    l4re_dbg = L4.Dbg.Info;
    log = L4.Env.log;
    -- run cons server with priority between io server and guest VMs
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x4a, 0x40),
    caps = { cons = log_fab:svr() }
    -- By default show output from all VMs (-a)
  }, "rom/cons -a");

print("Creating karma Caps.");
karma_vm1_caps.fb 	= con_caps.con:create(L4.Proto.Goos);

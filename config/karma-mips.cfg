-- vim:set ft=lua:

require("L4");

print("karma-caps\n");
local karma_caps = {
    con     = L4.default_loader:new_channel();
    vbus    = L4.default_loader:new_channel();
    rtc     = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

print("con-caps\n");
local con_caps = {
    fb 	    =  -- L4.Env.vesa;
              L4.default_loader:new_channel();
    vbus    = L4.default_loader:new_channel();
    con     = karma_caps.con:svr();
    rom     = L4.Env.rom;
};
print("fb-caps\n");
local fb_caps = {
    vbus    = L4.default_loader:new_channel();
    fb      = con_caps.fb:svr();
    rom     = L4.Env.rom;
};
print("rtc-caps\n");
local rtc_caps = {
    vbus    = L4.default_loader:new_channel();
    rtc     = karma_caps.rtc:svr();
    rom     = L4.Env.rom;
    sigma0  = L4.Env.sigma0;
};

print("io-caps\n");
local io_caps = {
    sigma0  = L4.cast(L4.Proto.Factory, L4.Env.sigma0):create(L4.Proto.Sigma0);
    rtc     = rtc_caps.vbus:svr();
    con_bus = con_caps.vbus:svr();
    live    = karma_caps.vbus:svr();
    fb      = fb_caps.vbus:svr();
    rom     = L4.Env.rom;
    icu     = L4.Env.icu;
};

print("Starting IO.");
L4.default_loader:startv(
        {
        caps = io_caps,
        log = { "io", "red" },
        },
        "rom/io",
        "rom/malta.devs",
        "rom/malta-io.vbus",
        "-vv"
        );

L4.default_loader:startv(
        {
        caps = rtc_caps,
        log = { "rtc", "blue" },
        },
        "rom/rtc");

print("Starting fb-drv");
L4.default_loader:startv(
        {
        caps = fb_caps,
        log =  { "fb", "cyan" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x18, 0x8),
        },
        "rom/fb-drv", "--config=noaccel,mode:640x480-16");
-- optionally use dummy fb-drv:
--        "rom/fb-drv", "-D");

print("Starting con");
L4.default_loader:startv(
        {
        caps = con_caps,
        log = { "con", "yellow" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x18, 0x8),
        },
        "rom/con");

-- start cons server for console multiplexing
print("Starting cons server for console multiplexing.");
log_fab = L4.default_loader:new_channel();
L4.default_loader:start(
  {
    l4re_dbg = L4.Dbg.Info;
    log = L4.Env.log;
    -- run cons server with priority between io server and guest VMs
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x4a, 0x40),
    caps = { cons = log_fab:svr() }
  }, "rom/cons -a");

print("Creating karma Caps.");
karma_caps.fb 	= con_caps.con:create(L4.Proto.Goos);
L4.default_loader:startv(
        {
        caps = karma_caps,
        log  = log_fab:create(L4.Proto.Log, "vm" .. "1", "r", "key=1");
        max_threads = 64,
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x8),
        l4re_dbg = L4.Dbg.Warn;
        },
        "rom/karma",
        "--virtual_cpus", "1",
        "--sleep", "0",
        "--mem", "128",
        "--fb",
        "--pci",
        "--debug_level=3",
        "--ramdisk_name=guestfs.img.gz",
        "--kernel_name=vmlinux",
        "-o", "nowait=1 rw video=l4fb:320x240@16,refreshsleep:100 console=tty0 console=ttyLv0"
--        "-o", "nowait=1 rw video=l4fb:320x240@16,refreshsleep:100 console=ttyLv0 console=tty0"
--        "-o", "pcnet32.debug=16 ignore_loglevel nowait=1 rw video=l4fb:320x240@16 console=tty0 console=ttyLv0 dyndbg=\"file drivers/of/irq.c +p; file drivers/pci/probe.c +p; file drivers/pci/pci.c +p; file drivers/pci/probe.c +p; file drivers/net/ethernet/amd/pcnet32.c +p\""
        );

-- vim:set ft=lua:

require("L4");

-- globals used in karma_smp_sys-vm.cfg
print("karma_vm1_caps\n");
karma_vm1_caps = {
    vbus    = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

print("karma_vm2_caps\n");
karma_vm2_caps = {
    vbus    = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

print("karma_vm3_caps\n");
karma_vm3_caps = {
    vbus    = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

-- keywords:
-- capabilities assigned to vbus:svr() refer to vbus objects defined in malta-io.vbus
print("io-caps\n");
local io_caps = {
    sigma0  = L4.cast(L4.Proto.Factory, L4.Env.sigma0):create(L4.Proto.Sigma0);
    vm1_bus = karma_vm1_caps.vbus:svr();
    vm2_bus = karma_vm2_caps.vbus:svr();
    vm3_bus = karma_vm3_caps.vbus:svr();
    rom     = L4.Env.rom;
    icu     = L4.Env.icu;
};

print("Starting IO.");
L4.default_loader:startv(
        {
        caps = io_caps,
        log = { "io", "red" },
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x90, 0x8),
        },
        "rom/io",
        "rom/malta.devs",
        "rom/karma_smp_sys-io.vbus",
        "-v"
        );

-- start cons server for console multiplexing
print("Starting cons server for console multiplexing.");
log_fab = L4.default_loader:new_channel();
L4.default_loader:start(
  {
    l4re_dbg = L4.Dbg.Info;
    log = L4.Env.log;
    -- run cons server with priority between io server and guest VMs
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x4a, 0x40),
    caps = { cons = log_fab:svr() }
    -- By default show output from all VMs (-a)
  }, "rom/cons -a");

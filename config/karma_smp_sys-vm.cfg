-- vim:set ft=lua:

require("L4");

-- NOTE If the platform supports less than 8 cpus the cpu affinity masks will
-- need to be adjusted or else the VMs on offline cpus will not run.
-- If the affinity is not specified then each VM's vcpu threads will be
-- allocated to run starting on cpu0.

local linux_virtual_cpus = 6;
local linux_cpu_affinity = 0x3f;
local fiasco_vm2_cpu_affinity = 0x40;
local fiasco_vm3_cpu_affinity = 0x80;

print("Starting karma SMP Linux VM 1.");

-- NOTE The linux guest kernel cmdline param "nowait=1" results in much better
-- performance than when karma emulates the wait instruction.
L4.default_loader:startv(
        {
        caps = karma_vm1_caps,
        log  = log_fab:create(L4.Proto.Log, "vm" .. "1", "r", "key=1");
        max_threads = 64,
        -- sched parameters:
        --   (L4.Proto.Scheduler, max_prio, min_prio, cpu_affinity)
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x8, linux_cpu_affinity),
        l4re_dbg = L4.Dbg.Warn;
        },
        "rom/karma_linux",
        "--virtual_cpus", tostring(linux_virtual_cpus),
        "--affinity_mask", tostring(linux_cpu_affinity),
        "--mem", "64",
        "--debug_level=2",
        "--ramdisk_name=guestfs.img.gz",
        "--paravirt_guest",
        "--kernel_name=vmlinux-paravirt",
        "-o", "nowait=1 rw console=ttyLv0 num_cpus=" .. linux_virtual_cpus
        );


print("Starting karma Fiasco VM 2.");

L4.default_loader:startv(
        {
        caps = karma_vm2_caps,
        log  = log_fab:create(L4.Proto.Log, "vm" .. "2", "b", "key=2");
        max_threads = 64,
        -- sched parameters:
        --   (L4.Proto.Scheduler, max_prio, min_prio, cpu_affinity)
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x8, fiasco_vm2_cpu_affinity),
        l4re_dbg = L4.Dbg.Warn;
        },
        "rom/karma_fiasco",
        "--sleep", "4",
        "--mem", "32",
        "--debug_level=2",
        "--ramdisk_name=",
        "--kernel_name=guest_os",
        "-o", ""
        );

print("Starting karma Fiasco VM 3.");

L4.default_loader:startv(
        {
        caps = karma_vm3_caps,
        log  = log_fab:create(L4.Proto.Log, "vm" .. "3", "g", "key=3");
        max_threads = 64,
        -- sched parameters:
        --   (L4.Proto.Scheduler, max_prio, min_prio, cpu_affinity)
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x8, fiasco_vm3_cpu_affinity),
        l4re_dbg = L4.Dbg.Warn;
        },
        "rom/karma_fiasco",
        "--sleep", "12",
        "--mem", "32",
        "--debug_level=2",
        "--ramdisk_name=",
        "--kernel_name=guest_os",
        "-o", ""
        );

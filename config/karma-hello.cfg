-- vim:set ft=lua:

-- karma-hello.cfg: Example for loading and running an arbitrary elf executable
-- as Karma VM guest.

require("L4");

print("karma-caps\n");
local karma_caps = {
    vbus    = L4.default_loader:new_channel();
    rom     = L4.Env.rom;
};

print("io-caps\n");
local io_caps = {
    sigma0  = L4.cast(L4.Proto.Factory, L4.Env.sigma0):create(L4.Proto.Sigma0);
    live    = karma_caps.vbus:svr();
    rom     = L4.Env.rom;
    icu     = L4.Env.icu;
};

print("Starting IO.");
L4.default_loader:startv(
        {
        caps = io_caps,
        log = { "io", "red" },
        },
        "rom/io",
        "rom/malta.devs",
        "rom/malta-io.vbus",
        "-vv"
        );

-- start cons server for console multiplexing
print("Starting cons server for console multiplexing.");
log_fab = L4.default_loader:new_channel();
L4.default_loader:start(
  {
    l4re_dbg = L4.Dbg.Info;
    -- run cons server with priority between io server and guest VMs
    scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x4a, 0x40),
    log = L4.Env.log;
    caps = { cons = log_fab:svr() }
  }, "rom/cons -a");

print("Creating karma Caps.");
L4.default_loader:startv(
        {
        caps = karma_caps,
        log  = log_fab:create(L4.Proto.Log, "guest", "g", "key=1");
        max_threads = 64,
        scheduler = L4.Env.user_factory:create(L4.Proto.Scheduler, 0x80, 0x8),
        l4re_dbg = L4.Dbg.Warn;
        },
        "rom/karma_fiasco",
        "--virtual_cpus", "1",
        "--sleep", "0",
        "--mem", "128",
        "--debug_level=3",
        "--ramdisk_name=",
        "--kernel_name=karma_hello",
        "-o", ""
        );
